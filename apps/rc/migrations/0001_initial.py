# Generated by Django 2.2.1 on 2023-01-17 09:48

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('main', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RCConfiguration',
            fields=[
                ('configuration_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.Configuration')),
                ('ipp', models.FloatField(default=300, validators=[django.core.validators.MinValueValidator(1)], verbose_name='IPP [Km]')),
                ('ntx', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number of TX')),
                ('clock_in', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(80)], verbose_name='Clock in [MHz]')),
                ('clock_divider', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(256)], verbose_name='Clock divider')),
                ('clock', models.FloatField(blank=True, default=1, verbose_name='Clock Master [MHz]')),
                ('time_before', models.PositiveIntegerField(default=12, verbose_name='Time before [&mu;S]')),
                ('time_after', models.PositiveIntegerField(default=1, verbose_name='Time after [&mu;S]')),
                ('sync', models.PositiveIntegerField(default=0, verbose_name='Synchro delay')),
                ('sampling_reference', models.CharField(choices=[('none', 'No Reference'), ('begin_baud', 'Begin of the first baud'), ('first_baud', 'Middle of the first baud'), ('sub_baud', 'Middle of the sub-baud')], default='none', max_length=40, verbose_name='Sampling Reference')),
                ('control_tx', models.BooleanField(default=False, verbose_name='Control Switch TX')),
                ('control_sw', models.BooleanField(default=False, verbose_name='Control Switch SW')),
                ('total_units', models.PositiveIntegerField(default=0)),
                ('mix', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'rc_configurations',
            },
            bases=('main.configuration',),
        ),
        migrations.CreateModel(
            name='RCLineCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('bits_per_code', models.PositiveIntegerField(default=0)),
                ('number_of_codes', models.PositiveIntegerField(default=0)),
                ('codes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'rc_line_codes',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RCLineType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('none', 'Not used'), ('tr', 'Transmission/reception selector signal'), ('tx', 'A modulating signal (Transmission pulse)'), ('codes', 'BPSK modulating signal'), ('windows', 'Sample window signal'), ('sync', 'Synchronizing signal'), ('flip', 'IPP related periodic signal'), ('prog_pulses', 'Programmable pulse'), ('mix', 'Mixed line')], max_length=40)),
                ('description', models.TextField(blank=True, null=True)),
                ('params', models.TextField(default='[]')),
            ],
            options={
                'db_table': 'rc_line_types',
            },
        ),
        migrations.CreateModel(
            name='RCLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel', models.PositiveIntegerField(default=0)),
                ('position', models.PositiveIntegerField(default=0)),
                ('params', models.TextField(default='{}')),
                ('pulses', models.TextField(default='')),
                ('line_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rc.RCLineType')),
                ('rc_configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rc.RCConfiguration')),
            ],
            options={
                'db_table': 'rc_lines',
                'ordering': ['channel'],
            },
        ),
        migrations.CreateModel(
            name='RCClock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mode', models.BooleanField(choices=[(True, 'Auto'), (False, 'Manual')], default=True)),
                ('multiplier', models.PositiveIntegerField(default=60)),
                ('divisor', models.PositiveIntegerField(default=10)),
                ('reference', models.PositiveSmallIntegerField(choices=[(0, 'Internal (25MHz)'), (1, 'External (10MHz)')], default=1)),
                ('frequency', models.FloatField(default=60.0)),
                ('rc_configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rc.RCConfiguration')),
            ],
        ),
    ]
